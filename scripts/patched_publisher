#!/usr/bin/env python
# Need to monkey patch stdlib before anything else is imported and has a chance to create threads.
from gevent import monkey
monkey.patch_all()  # noqa

import gc
import threading
import rospy
from std_msgs.msg import String

from gevent import Greenlet

'''
In this example we calculate the number of threads and greenlets and publish them.  Notice the `monkey.patch_all()`
call at the top. This patches stdlib to use greenlets anywhere threading would have been used. By calling this before
importing and using rospy, we have patched rospy to use Greenlets, not threads.
'''

if __name__ == '__main__':
    rospy.init_node('patched_publisher')
    pub = rospy.Publisher('string_topic', String, queue_size=1)
    r = rospy.Rate(1)

    while not rospy.is_shutdown():
        thread_count = threading.active_count()
        greenlet_count = len([g for g in gc.get_objects() if isinstance(g, Greenlet)])
        pub.publish('Thread count: {}. Greenlet count: {}'.format(thread_count, greenlet_count))
        r.sleep()
