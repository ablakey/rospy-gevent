#!/usr/bin/env python
from __future__ import print_function
import gevent
import signal
import gc
import threading

'''
In this example we expect to see 1 thread and 3 greenlets. Because we're not monkey patching and then creating threads
explicitly, the only thread present is the main thread that everything runs in.

We create three greenlets, each of which call `run_forever`.  Each prints a line and then sleeps for 1000 seconds.
Sleeping effectively yields to the "Hub" which then invokes the next queued event. In this case, there won't be
anything else, so it spins waiting for another event (aka. a greenlet wanting to do something).

Note that all three greenlets are created before they are run. That's because `gevent.spawn` creates a greenlet
and *schedules* it to be run. Which means pushing it onto the queue. The queue will not be touched until
the main thread yields, which is done by `greenlet1.join()`. If you removed that line, the greenlets would be created,
the functions would be added to the queue, and then the main thread would exit.

There are many other ways to spin/block/yield to Hub. Gevent has great docs.
'''

def run_forever():
    thread_count = threading.active_count()
    greenlet_count = len([g for g in gc.get_objects() if isinstance(g, gevent.Greenlet)])
    print('Thread count: {}. Greenlet count: {}'.format(thread_count, greenlet_count))
    gevent.sleep(1)


if __name__ == '__main__':
    gevent.signal(signal.SIGQUIT, gevent.kill)
    greenlet1 = gevent.spawn(run_forever)
    greenlet2 = gevent.spawn(run_forever)
    greenlet3 = gevent.spawn(run_forever)
    greenlet1.join()
